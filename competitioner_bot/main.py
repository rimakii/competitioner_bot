import telebot
import ast
import time
from telebot import types


# –º–æ–¥—É–ª—å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Öq
import sqlite3
from datetime import datetime, timezone, timedelta


bot = telebot.TeleBot("6661527759:AAGXDtVjWVPnhsBDVFFyP9DN_uzc5cCJno8")




# –°–æ–∑–¥–∞–π—Ç–µ —Ç–∞–±–ª–∏—Ü—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –µ—Å–ª–∏ –æ–Ω–∞ –µ—â–µ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
conn = sqlite3.connect("users.db")


olympiks = ["one", "two", "thre", "four", "five"]
save_olympiks = []
index = 0
delete_ol = ""
username = ""




@bot.message_handler(commands=["start"])
def start_message(message):
    markup = types.InlineKeyboardMarkup()
    button_log = types.InlineKeyboardButton(
        text="–í—Ö–æ–¥ –≤ —Å–∏—Å—Ç–µ–º—É", callback_data="login"
    )
    button_reg = types.InlineKeyboardButton(
        text="–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –≤ —Å–∏—Å—Ç–µ–º–µ", callback_data="reg"
    )
    markup.add(button_log, button_reg)
    bot.send_message(
        message.chat.id,
        "–ü—Ä–∏–≤–µ—Çüëã , —è Competitioner –±–æ—Ç! –Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ —Å –≤—ã–±–æ—Ä–æ–º –æ–ª–∏–º–ø–∏–∞–¥—ã –∏ –Ω–∞–ø–æ–º–Ω—é –æ –µ–µ –Ω–∞—á–∞–ª–µ –≤ —É–¥–æ–±–Ω–æ–µ –≤—Ä–µ–º—è.\n–ù–∞–∂–º–∏ –Ω–∞ –æ–¥–Ω—É –∏–∑ –ø–æ—è–≤–∏–≤—à–∏—Ö—Å—è –∫–Ω–æ–ø–æ–∫:",
        reply_markup=markup,
    )




@bot.callback_query_handler(func=lambda call: call.data == "reg")
def register(call):
    # –ó–∞–ø—Ä–æ—Å–∏—Ç–µ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ª–æ–≥–∏–Ω
    bot.send_message(call.message.chat.id, "–í–≤–µ–¥–∏—Ç–µ —Å–≤–æ–π –ª–æ–≥–∏–Ω:")


    # –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ "–≤–≤–æ–¥ –ª–æ–≥–∏–Ω–∞"
    bot.set_state(call.message.chat.id, "username")




@bot.message_handler(func=lambda message: bot.get_state(message.chat.id) == "username")
def get_username(message):
    # –ü–æ–ª—É—á–∏—Ç–µ –ª–æ–≥–∏–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –∑–∞–ø—Ä–æ—Å–∏—Ç–µ –ø–∞—Ä–æ–ª—å
    global username
    username = message.text
    bot.send_message(message.chat.id, f"–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å –¥–ª—è –ª–æ–≥–∏–Ω–∞ {username}:")


    # –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ "–≤–≤–æ–¥ –ø–∞—Ä–æ–ª—è"
    bot.set_state(message.chat.id, "password")




@bot.message_handler(func=lambda message: bot.get_state(message.chat.id) == "password")
def get_password(message):
    # –ü–æ–ª—É—á–∏—Ç–µ –ø–∞—Ä–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ –µ–≥–æ
    global username
    password = message.text
    register_user(message.chat.id, username, password)


    # –£–¥–∞–ª–∏—Ç–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    bot.delete_state(message.chat.id)


    # –°–æ–æ–±—â–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –æ–± —É—Å–ø–µ—à–Ω–æ–π —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
    bot.send_message(message.chat.id, "–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ!")




def register_user(user_login, username, password):
    # –í—Å—Ç–∞–≤—å—Ç–µ –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    conn = sqlite3.connect("users.db")
    cursor = conn.cursor()
    cursor.execute(
        "INSERT INTO users (id, username, password) VALUES (?, ?, ?)",
        (user_login, username, password),
    )
    conn.commit()




@bot.callback_query_handler(func=lambda call: call.data == "login")
def login(call):
    # –ó–∞–ø—Ä–æ—Å–∏—Ç–µ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ª–æ–≥–∏–Ω
    bot.send_message(call.message.chat.id, "–í–≤–µ–¥–∏—Ç–µ —Å–≤–æ–π –ª–æ–≥–∏–Ω:")


    # –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ "–≤–≤–æ–¥ –ª–æ–≥–∏–Ω–∞"
    bot.set_state(call.message.chat.id, "username_log")




# –û–±—Ä–∞–±–æ—Ç–∞–π—Ç–µ –≤–≤–æ–¥ –ª–æ–≥–∏–Ω–∞
@bot.message_handler(
    func=lambda message: bot.get_state(message.chat.id) == "username_log"
)
def get_username(message):
    # –ü–æ–ª—É—á–∏—Ç–µ –ª–æ–≥–∏–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –∑–∞–ø—Ä–æ—Å–∏—Ç–µ –ø–∞—Ä–æ–ª—å
    global username
    username = message.text
    bot.send_message(message.chat.id, f"–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å –¥–ª—è –ª–æ–≥–∏–Ω–∞ {username}:")


    # –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ "–≤–≤–æ–¥ –ø–∞—Ä–æ–ª—è"
    bot.set_state(message.chat.id, "password_log")




# –û–±—Ä–∞–±–æ—Ç–∞–π—Ç–µ –≤–≤–æ–¥ –ø–∞—Ä–æ–ª—è
@bot.message_handler(
    func=lambda message: bot.get_state(message.chat.id) == "password_log"
)
def get_password(message):
    # –ü–æ–ª—É—á–∏—Ç–µ –ø–∞—Ä–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –µ–≥–æ
    global username


    password = message.text
    user_id = check_credentials(username, password)


    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω
    if user_id:
        # –°–æ–æ–±—â–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –æ–± —É—Å–ø–µ—à–Ω–æ–π –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
        bot.send_message(message.chat.id, "–í—ã —É—Å–ø–µ—à–Ω–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–ª–∏—Å—å!")
    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω
    else:
        # –°–æ–æ–±—â–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –æ —Ç–æ–º, —á—Ç–æ –¥–∞–Ω–Ω—ã–µ –≤–≤–µ–¥–µ–Ω—ã –Ω–µ–≤–µ—Ä–Ω–æ
        bot.send_message(
            message.chat.id, "–ù–µ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≤—Ö–æ–¥–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑."
        )


    # –£–¥–∞–ª–∏—Ç–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    bot.delete_state(message.chat.id)




# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —É—á–µ—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
def check_credentials(username, password):
    # –í—ã–ø–æ–ª–Ω–∏—Ç–µ –∑–∞–ø—Ä–æ—Å –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º–∏ —É—á–µ—Ç–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
    conn = sqlite3.connect("users.db")
    cursor = conn.cursor()
    cursor.execute(
        "SELECT id FROM users WHERE username = ? AND password = ?", (username, password)
    )
    result = cursor.fetchone()
    conn.commit()


    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–π–¥–µ–Ω, –≤–µ—Ä–Ω–∏—Ç–µ –µ–≥–æ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä
    if result:
        return result[0]
    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω, –≤–µ—Ä–Ω–∏—Ç–µ None
    else:
        return None




@bot.message_handler(commands=["about"])
def start_message(message):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    button_add = types.KeyboardButton("–î–æ–±–∞–≤–∏—Ç—å –æ–ª–∏–º–ø–∏–∞–¥—É")
    button_mine = types.KeyboardButton("–°–ø–∏—Å–æ–∫ –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö –æ–ª–∏–º–ø–∏–∞–¥")
    markup.add(button_add, button_mine)
    bot.send_message(
        message.chat.id,
        "–ü—Ä–∏–≤–µ—Çüëã , —è Competitioner –±–æ—Ç! –Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ —Å –≤—ã–±–æ—Ä–æ–º –æ–ª–∏–º–ø–∏–∞–¥—ã –∏ –Ω–∞–ø–æ–º–Ω—é –æ –µ–µ –Ω–∞—á–∞–ª–µ –≤ —É–¥–æ–±–Ω–æ–µ –≤—Ä–µ–º—è.",
        reply_markup=markup,
    )




@bot.message_handler(commands=["add"])
def start_message(message):
    markup = types.InlineKeyboardMarkup()
    for ol in olympiks:
        markup.add(types.InlineKeyboardButton(text=f"{ol}", callback_data=ol))
    bot.send_message(message.chat.id, "–°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –æ–ª–∏–º–ø–∏–∞–¥:", reply_markup=markup)




@bot.message_handler(content_types="text")
def message_reply(message):
    if message.text == "–î–æ–±–∞–≤–∏—Ç—å –æ–ª–∏–º–ø–∏–∞–¥—É":
        markup = types.InlineKeyboardMarkup()
        for ol in olympiks:
            markup.add(types.InlineKeyboardButton(text=f"{ol}", callback_data=ol))
        bot.send_message(message.chat.id, "–°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –æ–ª–∏–º–ø–∏–∞–¥:", reply_markup=markup)


    elif message.text == "–°–ø–∏—Å–æ–∫ –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö –æ–ª–∏–º–ø–∏–∞–¥":
        if save_olympiks:
            markup = types.InlineKeyboardMarkup()
            for ol in save_olympiks:
                markup.add(
                    types.InlineKeyboardButton(text=f"{ol}", callback_data="save" + ol)
                )
            bot.send_message(
                message.chat.id, "–°–ø–∏—Å–æ–∫ –º–æ–∏—Ö –æ–ª–∏–º–ø–∏–∞–¥:", reply_markup=markup
            )
        else:
            bot.send_message(message.chat.id, "–°–ø–∏—Å–æ–∫ –ø—É—Å—Ç üòû.")


    elif message.text == "–î–∞":
        save_olympiks.append(olympiks[index])
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        button_add = types.KeyboardButton("–î–æ–±–∞–≤–∏—Ç—å –æ–ª–∏–º–ø–∏–∞–¥—É")
        button_mine = types.KeyboardButton("–°–ø–∏—Å–æ–∫ –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö –æ–ª–∏–º–ø–∏–∞–¥")
        markup.add(button_add, button_mine)
        bot.send_message(
            message.chat.id, "–û–ª–∏–º–ø–∏–∞–¥–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ —Å–ø–∏—Å–æ–∫ ü•≥.", reply_markup=markup
        )


    elif message.text == "–ù–µ—Ç":
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        button_add = types.KeyboardButton("–î–æ–±–∞–≤–∏—Ç—å –æ–ª–∏–º–ø–∏–∞–¥—É")
        button_mine = types.KeyboardButton("–°–ø–∏—Å–æ–∫ –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö –æ–ª–∏–º–ø–∏–∞–¥")
        markup.add(button_add, button_mine)
        bot.send_message(message.chat.id, "ok", reply_markup=markup)


    elif message.text == "–£–¥–∞–ª–∏—Ç—å":
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        button_add = types.KeyboardButton("–î–æ–±–∞–≤–∏—Ç—å –æ–ª–∏–º–ø–∏–∞–¥—É")
        button_mine = types.KeyboardButton("–°–ø–∏—Å–æ–∫ –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö –æ–ª–∏–º–ø–∏–∞–¥")
        markup.add(button_add, button_mine)
        save_olympiks.remove(delete_ol)
        bot.send_message(
            message.chat.id, "–û–ª–∏–º–ø–∏–∞–¥–∞ —É–¥–∞–ª–µ–Ω–∞ –∏–∑ —Å–ø–∏—Å–∫–∞.", reply_markup=markup
        )


    elif message.text == "–û—Å—Ç–∞–≤–∏—Ç—å –≤—Å–µ –∫–∞–∫ –µ—Å—Ç—å":
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        button_add = types.KeyboardButton("–î–æ–±–∞–≤–∏—Ç—å –æ–ª–∏–º–ø–∏–∞–¥—É")
        button_mine = types.KeyboardButton("–°–ø–∏—Å–æ–∫ –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö –æ–ª–∏–º–ø–∏–∞–¥")
        markup.add(button_add, button_mine)
        bot.send_message(message.chat.id, "–û–∫", reply_markup=markup)




@bot.callback_query_handler(func=lambda call: True)
def callback_handler(call):
    # –ò–∑–≤–ª–µ–∫–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç —Å–ø–∏—Å–∫–∞ –∏–∑ callback_data
    element = call.data
    if "save" in element:
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        button_delete = types.KeyboardButton("–£–¥–∞–ª–∏—Ç—å")
        button_no = types.KeyboardButton("–û—Å—Ç–∞–≤–∏—Ç—å –≤—Å–µ –∫–∞–∫ –µ—Å—Ç—å")
        markup.add(button_delete, button_no)
        element = element[4:]
        global delete_ol
        delete_ol = element
        bot.send_message(
            call.message.chat.id,
            f"–û–ø–∏—Å–∞–Ω–∏–µ –æ–ª–∏–º–ø–∏–∞–¥—ã:{element}, inex = {olympiks.index(element)}",
            reply_markup=markup,
        )
    else:
        global index
        index = olympiks.index(element)
        bot.send_message(
            call.message.chat.id,
            f"–û–ø–∏—Å–∞–Ω–∏–µ –æ–ª–∏–º–ø–∏–∞–¥—ã:{element}, inex = {olympiks.index(element)}\n–î–æ–±–∞–≤–∏—Ç—å –æ–ª–∏–º–ø–∏–∞–¥—É –≤ —Å–ø–∏—Å–æ–∫ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö?",
        )
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        button_yes = types.KeyboardButton("–î–∞")
        button_no = types.KeyboardButton("–ù–µ—Ç")
        markup.add(button_yes, button_no)
        bot.send_message(
            call.message.chat.id,
            "–î–æ–±–∞–≤–∏—Ç—å –æ–ª–∏–º–ø–∏–∞–¥—É –≤ —Å–ø–∏—Å–æ–∫ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö?",
            reply_markup=markup,
        )




while True:
    try:
        bot.polling(none_stop=True, interval=0, timeout=0)
    except:
        time.sleep(10)