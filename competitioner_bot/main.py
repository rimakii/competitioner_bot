import telebot
import ast
import time
from telebot import types
import pickle

# –º–æ–¥—É–ª—å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Öq
import sqlite3
from datetime import datetime, timezone, timedelta

bot = telebot.TeleBot("6661527759:AAGXDtVjWVPnhsBDVFFyP9DN_uzc5cCJno8")


# –°–æ–∑–¥–∞–π—Ç–µ —Ç–∞–±–ª–∏—Ü—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –µ—Å–ª–∏ –æ–Ω–∞ –µ—â–µ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
conn = sqlite3.connect("users.db")
cursor = conn.cursor()
cursor.execute(
    """CREATE TABLE IF NOT EXISTS users (id INTEGER PRIMARY KEY, username TEXT, password TEXT, login_chatids BLOB, saved_olymps BLOB)"""
)
conn.commit()

olympiks = ["one", "two", "thre", "four", "five"]
save_olympiks = []
index = 0
delete_ol = ""
username = ""


def add_chatid(chat_id, login):
    # –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö

    conn = sqlite3.connect("users.db")

    cursor = conn.cursor()

    # –ò–∑–≤–ª–µ–∫–∏—Ç–µ —Ç–µ–∫—É—â–∏–π –º–∞—Å—Å–∏–≤ login_chatids –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    cursor.execute("SELECT login_chatids FROM users WHERE username = ?", (login,))
    login_chatids = cursor.fetchone()[0]

    # –ï—Å–ª–∏ –º–∞—Å—Å–∏–≤ login_chatids –ø—É—Å—Ç, —Å–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—ã–π –º–∞—Å—Å–∏–≤
    if login_chatids is None:
        login_chatids = []
    else:
        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–π—Ç–µ –º–∞—Å—Å–∏–≤ login_chatids –∏–∑ –¥–≤–æ–∏—á–Ω–æ–≥–æ –æ–±—ä–µ–∫—Ç–∞ –≤ —Å–ø–∏—Å–æ–∫ Python
        login_chatids = pickle.loads(login_chatids)

    # –î–æ–±–∞–≤—å—Ç–µ chat_id –≤ —Å–ø–∏—Å–æ–∫ login_chatids
    login_chatids.append(chat_id)

    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–π—Ç–µ —Å–ø–∏—Å–æ–∫ login_chatids –æ–±—Ä–∞—Ç–Ω–æ –≤ –¥–≤–æ–∏—á–Ω—ã–π –æ–±—ä–µ–∫—Ç
    login_chatids = pickle.dumps(login_chatids)

    # –û–±–Ω–æ–≤–∏—Ç–µ –ø–æ–ª–µ login_chatids –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    cursor.execute(
        "UPDATE users SET login_chatids = ? WHERE username = ?", (login_chatids, login)
    )
    conn.commit()

    # –ó–∞–∫—Ä–æ–π—Ç–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
    cursor.close()
    conn.close()


def check_logging(chat_id, login):
    # –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
    conn = sqlite3.connect("users.db")
    cursor = conn.cursor()

    # –ò–∑–≤–ª–µ–∫–∏—Ç–µ —Ç–µ–∫—É—â–∏–π –º–∞—Å—Å–∏–≤ login_chatids –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    cursor.execute("SELECT login_chatids FROM users WHERE username = ?", (login,))
    login_chatids = cursor.fetchone()[0]

    # –ï—Å–ª–∏ –º–∞—Å—Å–∏–≤ login_chatids –ø—É—Å—Ç, –≤–µ—Ä–Ω–∏—Ç–µ False
    if login_chatids is None:
        return False
    else:
        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–π—Ç–µ –º–∞—Å—Å–∏–≤ login_chatids –∏–∑ –¥–≤–æ–∏—á–Ω–æ–≥–æ –æ–±—ä–µ–∫—Ç–∞ –≤ —Å–ø–∏—Å–æ–∫ Python
        login_chatids = pickle.loads(login_chatids)
    for i in login_chatids:
        bot.send_message(chat_id, f"{i}")
    # –ü—Ä–æ–≤–µ—Ä—å—Ç–µ, –µ—Å—Ç—å –ª–∏ chat_id –≤ —Å–ø–∏—Å–∫–µ login_chatids
    return chat_id in login_chatids


def check_account(chat_id):
    # –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
    conn = sqlite3.connect("users.db")
    cursor = conn.cursor()

    # –ò–∑–≤–ª–µ–∫–∏—Ç–µ –≤—Å–µ –∑–∞–ø–∏—Å–∏ –∏–∑ —Ç–∞–±–ª–∏—Ü—ã users
    cursor.execute("SELECT * FROM users")
    users = cursor.fetchall()

    # –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–∞–∂–¥—É—é –∑–∞–ø–∏—Å—å –Ω–∞ –Ω–∞–ª–∏—á–∏–µ chat_id –≤ –º–∞—Å—Å–∏–≤–µ login_chatids
    for user in users:
        login_chatids = user[3]

        # –ï—Å–ª–∏ –º–∞—Å—Å–∏–≤ login_chatids –ø—É—Å—Ç–æ–π, –ø–µ—Ä–µ–π–¥–∏—Ç–µ –∫ —Å–ª–µ–¥—É—é—â–µ–π –∑–∞–ø–∏—Å–∏
        if login_chatids is None:
            continue

        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–π—Ç–µ –º–∞—Å—Å–∏–≤ login_chatids –∏–∑ –¥–≤–æ–∏—á–Ω–æ–≥–æ –æ–±—ä–µ–∫—Ç–∞ –≤ —Å–ø–∏—Å–æ–∫ Python
        login_chatids = pickle.loads(login_chatids)

        # –ü—Ä–æ–≤–µ—Ä—å—Ç–µ, –µ—Å—Ç—å –ª–∏ chat_id –≤ —Å–ø–∏—Å–∫–µ login_chatids
        if chat_id in login_chatids:
            # –ï—Å–ª–∏ chat_id –Ω–∞–π–¥–µ–Ω, –≤–µ—Ä–Ω–∏—Ç–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π username
            return user[1]

    # –ï—Å–ª–∏ chat_id –Ω–µ –Ω–∞–π–¥–µ–Ω –Ω–∏ –≤ –æ–¥–Ω–æ–π –∑–∞–ø–∏—Å–∏, –≤–µ—Ä–Ω–∏—Ç–µ None
    return None


def delete_id(chat_id, username):
    # –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
    conn = sqlite3.connect("users.db")
    cursor = conn.cursor()

    # –ò–∑–≤–ª–µ–∫–∏—Ç–µ —Ç–µ–∫—É—â–∏–π –º–∞—Å—Å–∏–≤ login_chatids –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ username
    cursor.execute("SELECT login_chatids FROM users WHERE username = ?", (username,))
    login_chatids = cursor.fetchone()[0]

    # –ï—Å–ª–∏ –º–∞—Å—Å–∏–≤ login_chatids –ø—É—Å—Ç–æ–π, –≤—ã–π–¥–∏—Ç–µ –∏–∑ —Ñ—É–Ω–∫—Ü–∏–∏
    if login_chatids is None:
        return

    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–π—Ç–µ –º–∞—Å—Å–∏–≤ login_chatids –∏–∑ –¥–≤–æ–∏—á–Ω–æ–≥–æ –æ–±—ä–µ–∫—Ç–∞ –≤ —Å–ø–∏—Å–æ–∫ Python
    login_chatids = pickle.loads(login_chatids)

    # –£–¥–∞–ª–∏—Ç–µ chat_id –∏–∑ —Å–ø–∏—Å–∫–∞ login_chatids
    login_chatids.remove(chat_id)

    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–π—Ç–µ —Å–ø–∏—Å–æ–∫ login_chatids –æ–±—Ä–∞—Ç–Ω–æ –≤ –¥–≤–æ–∏—á–Ω—ã–π –æ–±—ä–µ–∫—Ç
    login_chatids = pickle.dumps(login_chatids)

    # –û–±–Ω–æ–≤–∏—Ç–µ —Å—Ç–æ–ª–±–µ—Ü login_chatids –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    cursor.execute(
        "UPDATE users SET login_chatids = ? WHERE username = ?",
        (login_chatids, username),
    )
    conn.commit()

    # –ó–∞–∫—Ä–æ–π—Ç–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
    cursor.close()
    conn.close()


@bot.message_handler(commands=["start"])
def start_message(message):
    markup = types.InlineKeyboardMarkup()
    button_log = types.InlineKeyboardButton(
        text="–í—Ö–æ–¥ –≤ —Å–∏—Å—Ç–µ–º—É", callback_data="login"
    )
    button_reg = types.InlineKeyboardButton(
        text="–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –≤ —Å–∏—Å—Ç–µ–º–µ", callback_data="reg"
    )
    markup.add(button_log, button_reg)
    bot.send_message(
        message.chat.id,
        "–ü—Ä–∏–≤–µ—Çüëã , —è Competitioner –±–æ—Ç! –Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ —Å –≤—ã–±–æ—Ä–æ–º –æ–ª–∏–º–ø–∏–∞–¥—ã –∏ –Ω–∞–ø–æ–º–Ω—é –æ –µ–µ –Ω–∞—á–∞–ª–µ –≤ —É–¥–æ–±–Ω–æ–µ –≤—Ä–µ–º—è.\n–ù–∞–∂–º–∏ –Ω–∞ –æ–¥–Ω—É –∏–∑ –ø–æ—è–≤–∏–≤—à–∏—Ö—Å—è –∫–Ω–æ–ø–æ–∫:",
        reply_markup=markup,
    )


@bot.callback_query_handler(func=lambda call: call.data == "reg")
def register(call):
    # –ó–∞–ø—Ä–æ—Å–∏—Ç–µ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ª–æ–≥–∏–Ω
    bot.send_message(call.message.chat.id, "–í–≤–µ–¥–∏—Ç–µ —Å–≤–æ–π –ª–æ–≥–∏–Ω:")

    # –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ "–≤–≤–æ–¥ –ª–æ–≥–∏–Ω–∞"
    bot.set_state(call.message.chat.id, "username")


@bot.message_handler(func=lambda message: bot.get_state(message.chat.id) == "username")
def get_username(message):
    # –ü–æ–ª—É—á–∏—Ç–µ –ª–æ–≥–∏–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –∑–∞–ø—Ä–æ—Å–∏—Ç–µ –ø–∞—Ä–æ–ª—å
    global username
    username = message.text
    bot.send_message(message.chat.id, f"–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å –¥–ª—è –ª–æ–≥–∏–Ω–∞ {username}:")

    # –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ "–≤–≤–æ–¥ –ø–∞—Ä–æ–ª—è"
    bot.set_state(message.chat.id, "password")


@bot.message_handler(func=lambda message: bot.get_state(message.chat.id) == "password")
def get_password(message):
    # –ü–æ–ª—É—á–∏—Ç–µ –ø–∞—Ä–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ –µ–≥–æ
    global username
    password = message.text
    chat_id = message.chat.id
    conn = sqlite3.connect("users.db")
    cursor = conn.cursor()
    cursor.execute("SELECT username FROM users")
    usernames = cursor.fetchall()
    if usernames is None:
        users = []
    else:
        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–π—Ç–µ —Å–ø–∏—Å–æ–∫ –∫–æ—Ä—Ç–µ–∂–µ–π –≤ —Å–ø–∏—Å–æ–∫ —Å—Ç—Ä–æ–∫
        users = [username[0] for username in usernames]
    check = check_account(chat_id)
    if check == None:
        if username in users:

            user_id = check_credentials(username, password)
            log = check_logging(chat_id, username)

            if user_id and log:
                bot.send_message(message.chat.id, "–í—ã —É–∂–µ –≤–æ—à–ª–∏ –≤ —Å–∏—Å—Ç–µ–º—É")
            else:
                bot.send_message(
                    message.chat.id, "–≠—Ç–æ—Ç –ª–æ–≥–∏–Ω —É–∂–µ –∑–∞–Ω—è—Ç, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞"
                )
        else:
            register_user(message.chat.id, username, password)
            add_chatid(chat_id, username)
            # –£–¥–∞–ª–∏—Ç–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            bot.delete_state(message.chat.id)
            # –°–æ–æ–±—â–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –æ–± —É—Å–ø–µ—à–Ω–æ–π —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
            bot.send_message(message.chat.id, "–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ!")
    else:
        bot.send_message(message.chat.id, f"{check}, c–Ω–∞—á–∞–ª–∞ –≤—ã–π–¥–µ—Ç–µ –∏–∑ –∞–∫–∫–∞—É–Ω—Ç–∞")


def register_user(user_login, username, password):

    # –í—Å—Ç–∞–≤—å—Ç–µ –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    conn = sqlite3.connect("users.db")
    cursor = conn.cursor()
    cursor.execute(
        "INSERT INTO users (username, password) VALUES (?, ?)",
        (username, password),
    )

    conn.commit()


@bot.callback_query_handler(func=lambda call: call.data == "login")
def login(call):
    # –ó–∞–ø—Ä–æ—Å–∏—Ç–µ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ª–æ–≥–∏–Ω
    bot.send_message(call.message.chat.id, "–í–≤–µ–¥–∏—Ç–µ —Å–≤–æ–π –ª–æ–≥–∏–Ω:")

    # –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ "–≤–≤–æ–¥ –ª–æ–≥–∏–Ω–∞"
    bot.set_state(call.message.chat.id, "username_log")


# –û–±—Ä–∞–±–æ—Ç–∞–π—Ç–µ –≤–≤–æ–¥ –ª–æ–≥–∏–Ω–∞
@bot.message_handler(
    func=lambda message: bot.get_state(message.chat.id) == "username_log"
)
def get_username(message):
    # –ü–æ–ª—É—á–∏—Ç–µ –ª–æ–≥–∏–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –∑–∞–ø—Ä–æ—Å–∏—Ç–µ –ø–∞—Ä–æ–ª—å
    global username
    username = message.text
    bot.send_message(message.chat.id, f"–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å –¥–ª—è –ª–æ–≥–∏–Ω–∞ {username}:")

    # –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ "–≤–≤–æ–¥ –ø–∞—Ä–æ–ª—è"
    bot.set_state(message.chat.id, "password_log")


# –û–±—Ä–∞–±–æ—Ç–∞–π—Ç–µ –≤–≤–æ–¥ –ø–∞—Ä–æ–ª—è
@bot.message_handler(
    func=lambda message: bot.get_state(message.chat.id) == "password_log"
)
def get_password(message):
    # –ü–æ–ª—É—á–∏—Ç–µ –ø–∞—Ä–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –µ–≥–æ
    global username
    chat_id = message.chat.id
    password = message.text
    user_id = check_credentials(username, password)
    check = check_account(chat_id)
    if check == None:
        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω
        if user_id:
            if check_logging(chat_id, username):
                bot.send_message(message.chat.id, "–í—ã —É–∂–µ –≤–æ—à–ª–∏ –≤ —Å–∏—Å—Ç–µ–º—É")
            else:
                # –°–æ–æ–±—â–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –æ–± —É—Å–ø–µ—à–Ω–æ–π –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
                markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
                button_add = types.KeyboardButton("–î–æ–±–∞–≤–∏—Ç—å –æ–ª–∏–º–ø–∏–∞–¥—É")
                button_mine = types.KeyboardButton("–°–ø–∏—Å–æ–∫ –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö –æ–ª–∏–º–ø–∏–∞–¥")
                markup.add(button_add, button_mine)
                add_chatid(chat_id, username)
                bot.send_message(
                    message.chat.id,
                    "–í—ã —É—Å–ø–µ—à–Ω–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–ª–∏—Å—å! –ú–æ–∂–µ—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –æ–ª–∏–º–ø–∏–∞–¥—É –∏–ª–∏ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —É–∂–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ",
                    reply_markup=markup,
                )
        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω
        else:
            # –°–æ–æ–±—â–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –æ —Ç–æ–º, —á—Ç–æ –¥–∞–Ω–Ω—ã–µ –≤–≤–µ–¥–µ–Ω—ã –Ω–µ–≤–µ—Ä–Ω–æ
            bot.send_message(
                message.chat.id, "–ù–µ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≤—Ö–æ–¥–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑."
            )
    else:
        bot.send_message(message.chat.id, f"{check}, c–Ω–∞—á–∞–ª–∞ –≤—ã–π–¥–µ—Ç–µ –∏–∑ –∞–∫–∫–∞—É–Ω—Ç–∞")
    # –£–¥–∞–ª–∏—Ç–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    bot.delete_state(message.chat.id)


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —É—á–µ—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
def check_credentials(username, password):
    # –í—ã–ø–æ–ª–Ω–∏—Ç–µ –∑–∞–ø—Ä–æ—Å –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º–∏ —É—á–µ—Ç–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
    conn = sqlite3.connect("users.db")
    cursor = conn.cursor()
    cursor.execute(
        "SELECT id FROM users WHERE username = ? AND password = ?", (username, password)
    )
    result = cursor.fetchone()
    conn.commit()

    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–π–¥–µ–Ω, –≤–µ—Ä–Ω–∏—Ç–µ –µ–≥–æ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä
    if result:
        return True
    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω, –≤–µ—Ä–Ω–∏—Ç–µ None
    else:
        return False


@bot.message_handler(commands=["exit"])
def exit_message(message):
    chat_id = message.chat.id
    check = check_account(chat_id)
    if check:
        delete_id(chat_id, check)
        bot.send_message(message.chat.id, f"{check}, –≤—ã –≤—ã—à–ª–∏ –∏–∑ –∞–∫–∫–∞—É–Ω—Ç–∞")
    else:
        bot.send_message(message.chat.id, "–î–ª—è –Ω–∞—á–∞–ª–∞ –∑–∞–π–¥–∏—Ç–µ –≤ –∞–∫–∫–∞—É–Ω—Ç")


@bot.message_handler(commands=["about"])
def start_message(message):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    button_add = types.KeyboardButton("–î–æ–±–∞–≤–∏—Ç—å –æ–ª–∏–º–ø–∏–∞–¥—É")
    button_mine = types.KeyboardButton("–°–ø–∏—Å–æ–∫ –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö –æ–ª–∏–º–ø–∏–∞–¥")
    markup.add(button_add, button_mine)
    bot.send_message(
        message.chat.id,
        "–ü—Ä–∏–≤–µ—Çüëã , —è Competitioner –±–æ—Ç! –Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ —Å –≤—ã–±–æ—Ä–æ–º –æ–ª–∏–º–ø–∏–∞–¥—ã –∏ –Ω–∞–ø–æ–º–Ω—é –æ –µ–µ –Ω–∞—á–∞–ª–µ –≤ —É–¥–æ–±–Ω–æ–µ –≤—Ä–µ–º—è.",
        reply_markup=markup,
    )


@bot.message_handler(commands=["add"])
def start_message(message):
    markup = types.InlineKeyboardMarkup()
    for ol in olympiks:
        markup.add(types.InlineKeyboardButton(text=f"{ol}", callback_data=ol))
    bot.send_message(message.chat.id, "–°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –æ–ª–∏–º–ø–∏–∞–¥:", reply_markup=markup)


@bot.message_handler(content_types="text")
def message_reply(message):
    if message.text == "–î–æ–±–∞–≤–∏—Ç—å –æ–ª–∏–º–ø–∏–∞–¥—É":
        markup = types.InlineKeyboardMarkup()
        for ol in olympiks:
            markup.add(types.InlineKeyboardButton(text=f"{ol}", callback_data=ol))
        bot.send_message(message.chat.id, "–°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –æ–ª–∏–º–ø–∏–∞–¥:", reply_markup=markup)

    elif message.text == "–°–ø–∏—Å–æ–∫ –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö –æ–ª–∏–º–ø–∏–∞–¥":
        if save_olympiks:
            markup = types.InlineKeyboardMarkup()
            for ol in save_olympiks:
                markup.add(
                    types.InlineKeyboardButton(text=f"{ol}", callback_data="save" + ol)
                )
            bot.send_message(
                message.chat.id, "–°–ø–∏—Å–æ–∫ –º–æ–∏—Ö –æ–ª–∏–º–ø–∏–∞–¥:", reply_markup=markup
            )
        else:
            bot.send_message(message.chat.id, "–°–ø–∏—Å–æ–∫ –ø—É—Å—Ç üòû.")

    elif message.text == "–î–∞":
        save_olympiks.append(olympiks[index])
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        button_add = types.KeyboardButton("–î–æ–±–∞–≤–∏—Ç—å –æ–ª–∏–º–ø–∏–∞–¥—É")
        button_mine = types.KeyboardButton("–°–ø–∏—Å–æ–∫ –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö –æ–ª–∏–º–ø–∏–∞–¥")
        markup.add(button_add, button_mine)
        bot.send_message(
            message.chat.id, "–û–ª–∏–º–ø–∏–∞–¥–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ —Å–ø–∏—Å–æ–∫ ü•≥.", reply_markup=markup
        )

    elif message.text == "–ù–µ—Ç":
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        button_add = types.KeyboardButton("–î–æ–±–∞–≤–∏—Ç—å –æ–ª–∏–º–ø–∏–∞–¥—É")
        button_mine = types.KeyboardButton("–°–ø–∏—Å–æ–∫ –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö –æ–ª–∏–º–ø–∏–∞–¥")
        markup.add(button_add, button_mine)
        bot.send_message(message.chat.id, "ok", reply_markup=markup)

    elif message.text == "–£–¥–∞–ª–∏—Ç—å":
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        button_add = types.KeyboardButton("–î–æ–±–∞–≤–∏—Ç—å –æ–ª–∏–º–ø–∏–∞–¥—É")
        button_mine = types.KeyboardButton("–°–ø–∏—Å–æ–∫ –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö –æ–ª–∏–º–ø–∏–∞–¥")
        markup.add(button_add, button_mine)
        save_olympiks.remove(delete_ol)
        bot.send_message(
            message.chat.id, "–û–ª–∏–º–ø–∏–∞–¥–∞ —É–¥–∞–ª–µ–Ω–∞ –∏–∑ —Å–ø–∏—Å–∫–∞.", reply_markup=markup
        )

    elif message.text == "–û—Å—Ç–∞–≤–∏—Ç—å –≤—Å–µ –∫–∞–∫ –µ—Å—Ç—å":
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        button_add = types.KeyboardButton("–î–æ–±–∞–≤–∏—Ç—å –æ–ª–∏–º–ø–∏–∞–¥—É")
        button_mine = types.KeyboardButton("–°–ø–∏—Å–æ–∫ –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö –æ–ª–∏–º–ø–∏–∞–¥")
        markup.add(button_add, button_mine)
        bot.send_message(message.chat.id, "–û–∫", reply_markup=markup)


@bot.callback_query_handler(func=lambda call: True)
def callback_handler(call):
    # –ò–∑–≤–ª–µ–∫–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç —Å–ø–∏—Å–∫–∞ –∏–∑ callback_data
    element = call.data
    if "save" in element:
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        button_delete = types.KeyboardButton("–£–¥–∞–ª–∏—Ç—å")
        button_no = types.KeyboardButton("–û—Å—Ç–∞–≤–∏—Ç—å –≤—Å–µ –∫–∞–∫ –µ—Å—Ç—å")
        markup.add(button_delete, button_no)
        element = element[4:]
        global delete_ol
        delete_ol = element
        bot.send_message(
            call.message.chat.id,
            f"–û–ø–∏—Å–∞–Ω–∏–µ –æ–ª–∏–º–ø–∏–∞–¥—ã:{element}, inex = {olympiks.index(element)}",
            reply_markup=markup,
        )
    else:
        global index
        index = olympiks.index(element)
        bot.send_message(
            call.message.chat.id,
            f"–û–ø–∏—Å–∞–Ω–∏–µ –æ–ª–∏–º–ø–∏–∞–¥—ã:{element}, inex = {olympiks.index(element)}\n–î–æ–±–∞–≤–∏—Ç—å –æ–ª–∏–º–ø–∏–∞–¥—É –≤ —Å–ø–∏—Å–æ–∫ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö?",
        )
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        button_yes = types.KeyboardButton("–î–∞")
        button_no = types.KeyboardButton("–ù–µ—Ç")
        markup.add(button_yes, button_no)
        bot.send_message(
            call.message.chat.id,
            "–î–æ–±–∞–≤–∏—Ç—å –æ–ª–∏–º–ø–∏–∞–¥—É –≤ —Å–ø–∏—Å–æ–∫ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö?",
            reply_markup=markup,
        )


while True:
    try:
        bot.polling(none_stop=True, interval=0, timeout=0)
    except:
        time.sleep(10)
